var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export function isSpace(source) {
    return /^\s+$/.test(source);
}
export function splitSpace(source) {
    var matches = source.match(/^\s+/);
    return matches == null
        ? ['', source]
        : [source.slice(0, matches[0].length), source.slice(matches[0].length)];
}
export function splitLines(source) {
    return source.split(/\r?\n/);
}
export function seedBlock(block) {
    if (block === void 0) { block = {}; }
    return __assign({ description: '', tags: [], source: [], problems: [] }, block);
}
export function seedSpec(spec) {
    if (spec === void 0) { spec = {}; }
    return __assign({ tag: '', name: '', type: '', optional: false, description: '', problems: [], source: [] }, spec);
}
export function seedTokens(tokens) {
    if (tokens === void 0) { tokens = {}; }
    return __assign({ start: '', delimiter: '', postDelimiter: '', tag: '', postTag: '', name: '', postName: '', type: '', postType: '', description: '', end: '' }, tokens);
}
/**
 * Assures Block.tags[].source contains references to the Block.source items,
 * using Block.source as a source of truth. This is a counterpart of rewireSpecs
 * @param block parsed coments block
 */
export function rewireSource(block) {
    var source = block.source.reduce(function (acc, line) { return acc.set(line.number, line); }, new Map());
    for (var _i = 0, _a = block.tags; _i < _a.length; _i++) {
        var spec = _a[_i];
        spec.source = spec.source.map(function (line) { return source.get(line.number); });
    }
    return block;
}
/**
 * Assures Block.tags[].source contains references to the Block.source items,
 * using Block.tags[].source as a source of truth. This is a counterpart of rewireSource
 * @param block parsed coments block
 */
export function rewireSpecs(block) {
    var source = block.tags.reduce(function (acc, spec) {
        return spec.source.reduce(function (acc, line) { return acc.set(line.number, line); }, acc);
    }, new Map());
    block.source = block.source.map(function (line) { return source.get(line.number) || line; });
    return block;
}
