import { splitSpace, seedTokens } from '../util';
import { Markers } from '../primitives';
export default function getParser(_a) {
    var _b = (_a === void 0 ? {} : _a).startLine, startLine = _b === void 0 ? 0 : _b;
    var block = null;
    var num = startLine;
    return function parseSource(source) {
        var _a, _b, _c;
        var rest = source;
        var tokens = seedTokens();
        _a = splitSpace(rest), tokens.start = _a[0], rest = _a[1];
        if (block === null &&
            rest.startsWith(Markers.start) &&
            !rest.startsWith(Markers.nostart)) {
            block = [];
            tokens.delimiter = rest.slice(0, Markers.start.length);
            rest = rest.slice(Markers.start.length);
            _b = splitSpace(rest), tokens.postDelimiter = _b[0], rest = _b[1];
        }
        if (block === null) {
            num++;
            return null;
        }
        var isClosed = rest.trimRight().endsWith(Markers.end);
        if (tokens.delimiter === '' &&
            rest.startsWith(Markers.delim) &&
            !rest.startsWith(Markers.end)) {
            tokens.delimiter = Markers.delim;
            rest = rest.slice(Markers.delim.length);
            _c = splitSpace(rest), tokens.postDelimiter = _c[0], rest = _c[1];
        }
        if (isClosed) {
            var trimmed = rest.trimRight();
            tokens.end = rest.slice(trimmed.length - Markers.end.length);
            rest = trimmed.slice(0, -Markers.end.length);
        }
        tokens.description = rest;
        block.push({ number: num, source: source, tokens: tokens });
        num++;
        if (isClosed) {
            var result = block.slice();
            block = null;
            return result;
        }
        return null;
    };
}
