var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { rewireSource } from '../util';
var pull = function (offset) { return function (str) { return str.slice(offset); }; };
var push = function (offset) {
    var space = ''.padStart(offset, ' ');
    return function (str) { return str + space; };
};
export default function indent(pos) {
    var shift;
    var pad = function (start) {
        if (shift === undefined) {
            var offset = pos - start.length;
            shift = offset > 0 ? push(offset) : pull(-offset);
        }
        return shift(start);
    };
    var update = function (line) { return (__assign(__assign({}, line), { tokens: __assign(__assign({}, line.tokens), { start: pad(line.tokens.start) }) })); };
    return function (_a) {
        var source = _a.source, fields = __rest(_a, ["source"]);
        return rewireSource(__assign(__assign({}, fields), { source: source.map(update) }));
    };
}
