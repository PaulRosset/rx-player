"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var primitives_1 = require("../primitives");
var util_1 = require("../util");
var zeroWidth = {
    start: 0,
    tag: 0,
    type: 0,
    name: 0,
};
var getWidth = function (w, _a) {
    var t = _a.tokens;
    return ({
        start: t.delimiter === primitives_1.Markers.start ? t.start.length : w.start,
        tag: Math.max(w.tag, t.tag.length),
        type: Math.max(w.type, t.type.length),
        name: Math.max(w.name, t.name.length),
    });
};
//  /**
//   * Description may go
//   * over multiple lines followed by @tags
//   *
//* @my-tag {my.type} my-name description line 1
//      description line 2
//      * description line 3
//   */
var space = function (len) { return ''.padStart(len, ' '); };
function align() {
    var intoTags = false;
    var w;
    function update(line) {
        var tokens = __assign({}, line.tokens);
        if (tokens.tag !== '')
            intoTags = true;
        var isEmpty = tokens.tag === '' &&
            tokens.name === '' &&
            tokens.type === '' &&
            tokens.description === '';
        // dangling '*/'
        if (tokens.end === primitives_1.Markers.end && isEmpty) {
            tokens.start = space(w.start + 1);
            return __assign(__assign({}, line), { tokens: tokens });
        }
        switch (tokens.delimiter) {
            case primitives_1.Markers.start:
                tokens.start = space(w.start);
                break;
            case primitives_1.Markers.delim:
                tokens.start = space(w.start + 1);
                break;
            default:
                tokens.start = space(w.start + 3);
                tokens.delimiter = '';
        }
        if (intoTags) {
            tokens.postTag = space(w.tag - tokens.tag.length + 1);
            tokens.postType = space(w.type - tokens.type.length + 1);
            tokens.postName = space(w.name - tokens.name.length + 1);
        }
        return __assign(__assign({}, line), { tokens: tokens });
    }
    return function (_a) {
        var source = _a.source, fields = __rest(_a, ["source"]);
        w = source.reduce(getWidth, __assign({}, zeroWidth));
        return util_1.rewireSource(__assign(__assign({}, fields), { source: source.map(update) }));
    };
}
exports.default = align;
