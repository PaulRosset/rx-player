{"id":"../../../utils/assert.ts","dependencies":[{"name":"/home/prosset/Documents/Canal+/rx-player/tsconfig.json","includedInParent":true,"mtime":1567699906905},{"name":"/home/prosset/Documents/Canal+/rx-player/package.json","includedInParent":true,"mtime":1571390912278},{"name":"../errors","loc":{"line":18,"column":25},"parent":"/home/prosset/Documents/Canal+/rx-player/src/utils/assert.ts","resolved":"/home/prosset/Documents/Canal+/rx-player/src/errors/index.ts"}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2015 CANAL+ Group\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"../errors\");\n/**\n * Throw an AssertionError if the given assertion is false.\n * @param {boolean} assertion\n * @param {string} [message] - Optional message property for the AssertionError.\n * @throws AssertionError - Throws if the assertion given is false\n */\n\n\nfunction assert(assertion, message) {\n  if (!assertion) {\n    throw new errors_1.AssertionError(message || \"invalid assertion\");\n  }\n}\n\nexports.default = assert;\n/**\n * Throws if the given Object does not respect the interface.\n * @param {Object} o\n * @param {Object} iface - Contains the checked keynames of o and link them\n * to their types (obtained through the typeof operator).\n * @param {string} [name=\"object\"] - name of the _interface_\n * @throws AssertionError - The argument o given is not an object\n * @throws AssertionError - The _interface_ is not respected.\n */\n\nfunction assertInterface(o, iface) {\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"object\";\n  assert(o != null, \"\".concat(name, \" should be an object\"));\n\n  for (var k in iface) {\n    if (iface.hasOwnProperty(k)) {\n      /* tslint:disable:max-line-length */\n      assert(_typeof(o[k]) === iface[k], \"\".concat(name, \" should have property \").concat(k, \" as a \").concat(iface[k]));\n      /* tslint:enable:max-line-length */\n    }\n  }\n}\n\nexports.assertInterface = assertInterface;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../utils/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":4}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":12}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":15}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":22}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":23}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":34}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":24,"column":35}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":24},"generated":{"line":33,"column":9}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":33,"column":15}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":31},"generated":{"line":33,"column":16}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":33,"column":25}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":52},"generated":{"line":33,"column":27}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":33,"column":34}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":69},"generated":{"line":33,"column":36}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":34,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":34,"column":6}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":26,"column":7},"generated":{"line":34,"column":7}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":34,"column":16}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":26,"column":18},"generated":{"line":34,"column":18}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":35,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":10},"generated":{"line":35,"column":10}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":14},"generated":{"line":35,"column":14}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":14},"generated":{"line":35,"column":22}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":14},"generated":{"line":35,"column":23}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":10},"generated":{"line":35,"column":37}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":29},"generated":{"line":35,"column":38}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":36},"generated":{"line":35,"column":45}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":40},"generated":{"line":35,"column":49}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":10},"generated":{"line":35,"column":68}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":35,"column":69}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":28,"column":3},"generated":{"line":36,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":29,"column":1},"generated":{"line":37,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":7}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":8}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":15}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":18}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":39,"column":24}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":16},"generated":{"line":50,"column":9}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":50,"column":24}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":43,"column":2},"generated":{"line":50,"column":25}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":50,"column":26}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":44,"column":2},"generated":{"line":50,"column":28}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":50,"column":33}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":50,"column":35}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":51,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":2},"generated":{"line":51,"column":6}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":51,"column":10}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":17},"generated":{"line":51,"column":81}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":51,"column":89}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":52,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":52,"column":2}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":52,"column":8}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":9},"generated":{"line":52,"column":9}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":10},"generated":{"line":52,"column":10}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":14},"generated":{"line":52,"column":14}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":52,"column":18}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":23},"generated":{"line":52,"column":30}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":52,"column":34}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":52,"column":60}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":2},"generated":{"line":54,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":7},"generated":{"line":54,"column":7}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":13},"generated":{"line":54,"column":11}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":2},"generated":{"line":54,"column":12}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":18},"generated":{"line":54,"column":16}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":2},"generated":{"line":54,"column":21}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":48,"column":25},"generated":{"line":54,"column":23}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":55,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":8},"generated":{"line":55,"column":8}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":13},"generated":{"line":55,"column":13}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":14},"generated":{"line":55,"column":14}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":8},"generated":{"line":55,"column":28}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":29},"generated":{"line":55,"column":29}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":8},"generated":{"line":55,"column":30}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":55,"column":31}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":49,"column":33},"generated":{"line":55,"column":33}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":56,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":57,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":57,"column":6}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":12},"generated":{"line":57,"column":12}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":13},"generated":{"line":57,"column":13}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":20},"generated":{"line":57,"column":21}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":21},"generated":{"line":57,"column":22}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":22},"generated":{"line":57,"column":23}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":21},"generated":{"line":57,"column":24}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":13},"generated":{"line":57,"column":25}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":29},"generated":{"line":57,"column":31}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":34},"generated":{"line":57,"column":36}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":35},"generated":{"line":57,"column":37}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":34},"generated":{"line":57,"column":38}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":12},"generated":{"line":57,"column":39}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":42},"generated":{"line":57,"column":51}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":12},"generated":{"line":57,"column":55}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":71},"generated":{"line":57,"column":90}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":12},"generated":{"line":57,"column":91}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":81},"generated":{"line":57,"column":110}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":86},"generated":{"line":57,"column":115}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":87},"generated":{"line":57,"column":116}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":86},"generated":{"line":57,"column":117}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":12},"generated":{"line":57,"column":118}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":57,"column":120}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":52,"column":6},"generated":{"line":58,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":53,"column":5},"generated":{"line":59,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":54,"column":3},"generated":{"line":60,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":61,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":7}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":8}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":23}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":26}},{"source":"../../../utils/assert.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":63,"column":41}}],"sources":{"../../../utils/assert.ts":"/**\n * Copyright 2015 CANAL+ Group\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AssertionError } from \"../errors\";\n\n/**\n * Throw an AssertionError if the given assertion is false.\n * @param {boolean} assertion\n * @param {string} [message] - Optional message property for the AssertionError.\n * @throws AssertionError - Throws if the assertion given is false\n */\nexport default function assert(assertion : boolean, message? : string) {\n  if (!assertion) {\n    throw new AssertionError(message || \"invalid assertion\");\n  }\n}\n\ntype IObjectInterface<T> = Partial<Record<keyof T, string>>;\n\n/**\n * Throws if the given Object does not respect the interface.\n * @param {Object} o\n * @param {Object} iface - Contains the checked keynames of o and link them\n * to their types (obtained through the typeof operator).\n * @param {string} [name=\"object\"] - name of the _interface_\n * @throws AssertionError - The argument o given is not an object\n * @throws AssertionError - The _interface_ is not respected.\n */\nexport function assertInterface<T>(\n  o: T,\n  iface: IObjectInterface<T>,\n  name: string = \"object\"\n) : void {\n  assert(o != null, `${name} should be an object`);\n  for (const k in iface) {\n    if (iface.hasOwnProperty(k)) {\n      /* tslint:disable:max-line-length */\n      assert(typeof o[k] === iface[k], `${name} should have property ${k} as a ${iface[k]}`);\n      /* tslint:enable:max-line-length */\n    }\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"4360b7632a5070810899f9cbc021ad99","cacheData":{"env":{}}}